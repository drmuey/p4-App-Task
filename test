use strict;
use warnings;
use feature 'say';
use App::Task;

####

sub _out {
    my ( $label, $msg ) = @_;

    print "print $label: $msg";

    print STDERR "print STDERR $label: $msg";

    printf "printf $label: %s", $msg;

    printf STDERR "printf STDERR $label: %s", $msg;

    warn "warn $label: $msg";

    say "say \$label: \$msg";
    say STDERR "say STDERR \$label: \$msg";

    return;
}

{
    eval { App::Task::tie_task() };
    die "tie_task() dies but STDERR/STDOUT are not yet tied\n" if $@;
    print "OK: tie_task() does not die when STDERR/STDOUT are not yet tied\n" if !$@;

    eval { App::Task::tie_task() };
    die "tie_task() does not die when STDERR/STDOUT are alreyd tied \n" if !$@;
    print "OK: tie_task() dies when STDERR/STDOUT are already tied\n"   if $@;

    untie *STDOUT;
    untie *STDERR;
}

print "I am at depth 0\n";

task "Foo" => sub {
    _out "newline", "I am foo\nWho are you?\n";

    task "foo nested 1" => sub {
        _out "newline", "Before: I (2) am still foo\nare you still you?\n";

        task "foo nested 2" => sub {
            _out "newline", "I (3) am still foo\nare you still you?\n";
        };

        _out "newline", "After: I (2) am still foo\nare you still you?\n";
    };

    task "foo nested 1 again" => sub { _out "newline", "hi\n"; };

    _out "newline", "AFTER: I am foo\nWho are you?\n";
};

task "Bar" => sub {
    _out "no-newline", "I am bar\nAt least so far";

    task "bar nested 1" => sub {
        _out "no-newline", "Before: I (2) am still bar\nAt least so far";

        task "bar nested 2" => sub {
            _out "no-newline", "I (3) am still bar\nAt least so far";
        };

        _out "no-newline", "After: I (2) am still bar\nAt least so far";
    };

    task "bar nested 1 again" => sub { _out "no-newline", "hi"; };

    _out "no-newline", "AFTER: I am finally bar\nAt least so far";
};

print "I also am at depth 0\n";

####

print "I am at depth 0\n";

task "first level arrayref beginning" => [ $^X, "-e", 'print "pre oh hai 1";warn "W pre oh hai 1\n";' ];
task "second level" => sub {
    task "second level arrayref beginning" => [ $^X, "-e", 'print "pre oh hai 2";warn "W pre oh hai 2\n";' ];
    task "third level" => sub {
        task "third level arrayref beginning" => [ $^X, "-e", 'print "pre oh hai 3";warn "W pre oh hai 3\n";' ];
        task "fourth level" => sub {
            task "fourth level arrayref" => [ $^X, "-e", 'print "pre oh hai 4";warn "W pre oh hai 4\n";' ];
        };
        task "third level arrayref beginning" => [ $^X, "-e", 'print "pre oh hai 3";warn "W pst oh hai 3\n";' ];
    };
    task "second level arrayref beginning" => [ $^X, "-e", 'print "pre oh hai 2";warn "W pst oh hai 2\n";' ];
};
task "first level arrayref end" => [ $^X, "-e", 'print "pre oh hai 1";warn "W pst oh hai 1\n";' ];

print "I also am at depth 0\n";

####

print "I am at depth 0\n";

task "first level string beginning" => qq|$^X -e 'print "pre oh hai 1";warn "W pre oh hai 1\n";'|;
task "second level"                 => sub {
    task "second level string beginning" => qq|$^X -e 'print "pre oh hai 2";warn "W pre oh hai 2\n";'|;
    task "third level"                   => sub {
        task "third level string beginning" => qq|$^X -e 'print "pre oh hai 3";warn "W pre oh hai 3\n";'|;
        task "fourth level"                 => sub {
            task "fourth level string" => qq|$^X -e 'print "pre oh hai 4";warn "W pre oh hai 4\n";'|;
        };
        task "third level string beginning" => qq|$^X -e 'print "pre oh hai 3";warn "W pst oh hai 3\n";'|;
    };
    task "second level string beginning" => qq|$^X -e 'print "pre oh hai 2";warn "W pst oh hai 2\n";'|;
};
task "first level string end" => qq|$^X -e 'print "pre oh hai 1";warn "W pst oh hai 1\n";'|;

print "I also am at depth 0\n";

####
